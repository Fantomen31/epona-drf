# Generated by Django 5.1.2 on 2024-10-30 10:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cities', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('contact_email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('social_links', models.JSONField(blank=True, default=dict)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('GHOST', 'Ghost')], default='PUBLIC', max_length=10)),
                ('membership_type', models.CharField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed')], default='OPEN', max_length=10)),
                ('weekly_meetup_schedule', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_clubs', to=settings.AUTH_USER_MODEL)),
                ('main_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='based_clubs', to='cities.city')),
                ('sister_cities', models.ManyToManyField(blank=True, related_name='sister_clubs', to='cities.city')),
            ],
        ),
        migrations.CreateModel(
            name='ClubRunUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date_time', models.DateTimeField()),
                ('meeting_point', models.CharField(max_length=255)),
                ('distance', models.FloatField(help_text='Distance in kilometers')),
                ('pace', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runups', to='clubs.club')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_club_runups', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='participated_club_runups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_time'],
            },
        ),
        migrations.CreateModel(
            name='ClubStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_members', models.IntegerField(default=0)),
                ('total_distance', models.FloatField(default=0)),
                ('weekly_distance', models.FloatField(default=0)),
                ('monthly_distance', models.FloatField(default=0)),
                ('yearly_distance', models.FloatField(default=0)),
                ('average_pace', models.FloatField(blank=True, null=True)),
                ('total_runups', models.IntegerField(default=0)),
                ('average_runup_attendance', models.FloatField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='clubs.club')),
            ],
        ),
        migrations.CreateModel(
            name='ClubJoinRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='join_requests', to='clubs.club')),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_join_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_join_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('club', 'user', 'status')},
            },
        ),
        migrations.CreateModel(
            name='ClubMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('CREATOR', 'Creator'), ('ADMIN', 'Admin'), ('MEMBER', 'Member')], default='MEMBER', max_length=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('total_distance', models.FloatField(default=0)),
                ('average_pace', models.FloatField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='clubs.club')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('club', 'user')},
            },
        ),
    ]
